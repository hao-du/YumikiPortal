@model IEnumerable<Yumiki.Web.WellCovered.Models.MD_Object>

@{
    ViewBag.Title = "Object List";
}
<div class="container">
    <h2>@ViewBag.Title</h2>
    <div class="well well-sm">
        <div class="btn-group">
            @Html.ActionLink("Add", "Create", new { appID = Request.Params[Constants.AppID] }, new { @class = "btn btn-primary" })
            @{
                if (string.IsNullOrWhiteSpace(Request.Params[Constants.Active]) || bool.Parse(Request.Params[Constants.Active]))
                {
                    @Html.ActionLink("Show Inactive", "List", new { active = false, appID = Request.Params[Constants.AppID] }, new { @class = "btn btn-default" })
                }
                else
                {
                    @Html.ActionLink("Show Active", "List", new { active = true, appID = Request.Params[Constants.AppID] }, new { @class = "btn btn-default" })
                }
            }
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            @using (Html.BeginForm("List", "Object", FormMethod.Get))
            {
                @Html.Hidden(Constants.Active, true);
                <div class="form-group">
                    @Html.Label("Applications");
                    @Html.DropDownList(Constants.AppID, (SelectList)ViewBag.AppDatasource, Yumiki.Commons.Dictionaries.CommonValues.SelectAllForDropDown, new { @class = "form-control selectpicker", @onchange = "this.form.submit();" })
                </div>
            }
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="table-responsive">
                <table class="table table-striped table-bordered">
                    <tr>
                        <th></th>
                        <th>
                            @Html.DisplayNameFor(model => model.ObjectName)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.ApiName)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.ApplicationName)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.LastUpdateDateUI)
                        </th>
                        <th></th>
                    </tr>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>
                                @Html.ActionLink("Edit", "Edit", new { id = item.ID, appID = Request.Params[Constants.AppID] })
                                <span class="yumiki-separator-vbar"></span>
                                @Html.ActionLink("Fields", "List", "Field", new { active = true, objectID = item.ID.ToString(), appID = Request.Params[Constants.AppID] }, new { target = "_blank" })
                            </td>
                            <td>
                                @{
                                    string objectName = string.Format("{0} - Display Name: {1}", item.ObjectName, item.DisplayName);
                                }
                                @Html.DisplayFor(modelItem => objectName)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.ApiName)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.ApplicationName)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.LastUpdateDateUI)
                            </td>
                            <td>
                                @Html.ActionLink("View Data", "List", "Live", new { objectID = item.ID.ToString(), active = true }, new { target = "_blank" })
                                <span class="yumiki-separator-vbar"></span>
                                @using (Html.BeginForm("PublishObject", "Live", FormMethod.Post, new { @id = string.Format("form-{0}", item.ID.ToString()) }))
                                {
                                    @Html.Hidden("objectID", item.ID.ToString())
                                    @Html.Hidden(Constants.AppID, Request.QueryString[Constants.AppID])
                                    <a href="#" onclick="yumiki.wellCovered.onListSubmit('@string.Format("form-{0}", item.ID.ToString())');">Publish</a>
                                }
                            </td>
                        </tr>
                    }

                </table>
            </div>
        </div>
    </div>
</div>
@section Script{
    @Html.Partial("_WellCoveredInclude")
}

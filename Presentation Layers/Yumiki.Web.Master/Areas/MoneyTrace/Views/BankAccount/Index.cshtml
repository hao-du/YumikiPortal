@using Yumiki.Web.MoneyTrace.Constants
@using Yumiki.Commons.Dictionaries;
@using Yumiki.Commons.Helpers;
@using Yumiki.Entity.MoneyTrace;
@{
    ViewBag.Title = "Bank Account";
}

@section Script{
    <style type="text/css">
        /*stop animation when accordion get collapsed */
        .collapsing {
            -webkit-transition: none;
            transition: none;
        }

        .panel {
            border: none;
        }
    </style>

    <script type="text/javascript">

        //Declare constant variables.
        var showActiveBankAccountString = 'Show Active Account';
        var showInactiveBankAccountString = 'Show Inactive Account';

        var app = angular.module('bankAccount', ['ui.bootstrap', 'yumiki-module']);

        //Service to transfer data between controllers.
        app.factory('DataTransfer', function () {
            return { bankAccountID: '' };
        });

        //Service to communicate with Server.
        app.service('DataService', function ($http) {
            this.getBankAccounts = function (showInactive, currentPage, itemsPerPage) {
                return $http.get('@Url.HttpRouteUrl(RouteNames.BankAccountGetAll, null)', { params: { 'showInactive': showInactive, 'currentPage': currentPage, 'itemsPerPage': itemsPerPage } });
            };

            this.getBankAccountByID = function (bankAccountID) {
                return $http.get('@Url.HttpRouteUrl(RouteNames.BankAccountGetByID, null)', { params: { 'bankAccountID': bankAccountID } });
            };

            this.save = function (bankAccount) {
                return $http.post('@Url.HttpRouteUrl(RouteNames.BankAccountSave, null)', bankAccount);
            };

            this.saveBankingWithdrawingTrace = function (bankAccount) {
                return $http.post('@Url.HttpRouteUrl(RouteNames.SaveBankingWithdrawingTrace, null)', bankAccount);
            };

            this.getBanks = function () {
                return $http.get('@Url.HttpRouteUrl(RouteNames.BankGetAllWithShareableItems, null)', { params: { 'showInactive': false } });
            };

            this.getCurrencyList = function () {
                return $http.get('@Url.HttpRouteUrl(RouteNames.CurrencyGetAllWithShareableItems, null)', { params: { 'showInactive': false } });
            };

        });

        //Controller to display items' list
        app.controller('bankAccountController', function ($scope, $rootScope, $http, DataService, DataTransfer) {
            $scope.inactiveButtonName = showInactiveBankAccountString;

            //To determine when load active or inactive list.
            $scope.isStatusChanged = false;

            //For paging
            $scope.viewby = 20;
            $scope.itemsPerPage = $scope.viewby;
            $scope.totalItems = 0;
            $scope.currentPage = 1;
            $scope.maxSize = 5; //Number of pager buttons to show

            //Display Dialog and pass data to Dialog.
            $scope.showDialog = function (bankAccountID) {
                //Call DialogController
                $rootScope.$broadcast("OnLoad", bankAccountID);
            }

            //Event for other controllers to reload data.
            $rootScope.$on('OnReloadData', function (event) {
                $scope.loadData();
            });

            //Load active or inactive list.
            $scope.loadData = function () {
                var showInactive = true;
                if ($scope.inactiveButtonName == showInactiveBankAccountString) {
                    showInactive = false;
                }

                if ($scope.isStatusChanged) {
                    showInactive = !showInactive;
                }

                $(this).showLoadingBar();
                DataService.getBankAccounts(showInactive, $scope.currentPage, $scope.itemsPerPage).then(
                    function mySucces(response) {
                        $scope.bankAccounts = response.data.Records;
                        $scope.currentPage = response.data.CurrentPage;
                        $scope.totalItems = response.data.TotalItems;
                        $scope.itemsPerPage = response.data.ItemsPerPage;

                        if ($scope.isStatusChanged) {
                            if ($scope.inactiveButtonName == showInactiveBankAccountString) {
                                $scope.inactiveButtonName = showActiveBankAccountString;
                            } else {
                                $scope.inactiveButtonName = showInactiveBankAccountString;
                            }
                            $scope.isStatusChanged = false;
                        }
                        $(this).hideLoadingBar();
                    }, function myError(response) {
                        $scope.isStatusChanged = false;
                        $(this).hideLoadingBar();

                        clientMessage(response.data, '', '@Yumiki.Commons.Logging.LogLevel.ERROR');
                    });
            };

            //When click on "ShowInActiveButton", reload data with active status.
            $scope.loadDataWithStatus = function () {
                $scope.isStatusChanged = true;
                $scope.loadData();
            };
        });

        //Controller to display dialog
        app.controller('bankAccountDialogController', function ($scope, $rootScope, $http, DataService, DataTransfer) {
            $scope.bankAccountID = undefined;
            $scope.isActiveCheckboxDisabled = false;

            //Used to be called by other controllers.
            $rootScope.$on('OnLoad', function (event, bankAccountID) {
                $('#dlgBankAccount').modal({ backdrop: 'static' });

                if (bankAccountID != undefined && bankAccountID != null) {
                    $scope.bankAccountID = bankAccountID;
                    $scope.isActiveCheckboxDisabled = false;
                    $scope.dialogTitle = "Edit Account";

                    $(this).showLoadingBar();

                    DataService.getBankAccountByID($scope.bankAccountID)
                        .then(function mySucces(response) {
                            $scope.bankAccount = response.data;

                            $scope.bankAccount.@TB_BankAccount.FieldName.WithdrawDate = moment($scope.bankAccount.@TB_BankAccount.FieldName.WithdrawDate).format('@Formats.DateTime.ClientMomentLongDate');

                            $(this).hideLoadingBar();

                        }, function myError(response) {
                            $(this).hideLoadingBar();

                            clientMessage(response.data, '', '@Yumiki.Commons.Logging.LogLevel.ERROR');
                        });

                } else {
                    $scope.dialogTitle = "New Account";
                    $scope.isActiveCheckboxDisabled = true;

                    $scope.bankAccount = $scope.resetBankAccount();
                }
            });

            //Reset object in new mode.
            $scope.resetBankAccount = function () {
                $scope.bankAccountForm.$setPristine();
                return {
                    '@CommonProperties.ID': undefined,
                    '@TB_BankAccount.FieldName.AccountNumber': '',
                    '@TB_BankAccount.FieldName.Amount': 0,
                    '@TB_BankAccount.FieldName.WithdrawDate': '',
                    '@TB_BankAccount.FieldName.DepositDate  ': '',
                    '@TB_BankAccount.FieldName.BankID': '',
                    '@TB_BankAccount.FieldName.CurrencyID': '',
                    '@TB_BankAccount.FieldName.Interest': 0,
                    '@CommonProperties.IsActive': true,
                    '@CommonProperties.Descriptions': ''
                };
            }

            //Save new or update object
            $scope.save = function (isValid) {
                if (isValid) {

                    $(this).showLoadingBar();

                    DataService.save($scope.bankAccount)
                        .then(function mySucces(response) {
                            $scope.bankAccountID = undefined;
                            $('#dlgBankAccount').modal('hide');

                            $scope.ReloadData();
                        }, function myError(response) {
                            $(this).hideLoadingBar();

                            clientMessage(response.data, '', '@Yumiki.Commons.Logging.LogLevel.ERROR');
                        });
                }
            };

            //Open Withdraw Bank Account dialog
            $scope.openWithdrawMessageDialog = function () {
                $('#dlgWithdrawMessageDialog').modal({ backdrop: 'static' });
            }

            //Withdraw bank account's amount
            $scope.withdraw = function () {
                $(this).showLoadingBar();

                DataService.saveBankingWithdrawingTrace($scope.bankAccount)
                    .then(function mySucces(response) {
                        $scope.bankAccountID = undefined;

                        $(this).hideLoadingBar();

                        clientMessage("Populated Withdraw Trace.", '', '@Yumiki.Commons.Logging.LogLevel.INFO');
                    }, function myError(response) {
                        $(this).hideLoadingBar();

                        clientMessage(response.data, '', '@Yumiki.Commons.Logging.LogLevel.ERROR');
                    });

                $('#dlgWithdrawMessageDialog').modal('hide');
            };

            //After saving, reload list.
            $scope.ReloadData = function () {
                $rootScope.$broadcast("OnReloadData");
            };

            // Bind datasource to controls such as Dropdownlist
            $scope.bindControls = function () {
                DataService.getBanks().then(
                    function mySucces(response) {
                        $scope.banks = response.data;
                    }, function myError(response) {
                        clientMessage(response.data, '', '@Yumiki.Commons.Logging.LogLevel.ERROR');
                    });

                DataService.getCurrencyList().then(
                    function mySucces(response) {
                        $scope.currencyList = response.data;
                    }, function myError(response) {
                        clientMessage(response.data, '', '@Yumiki.Commons.Logging.LogLevel.ERROR');
                    });
            }
        });
    </script>
}

<div ng-app="bankAccount">
    <div class="container" ng-controller="bankAccountController" ng-init="loadData();">
        <h2>Bank Account</h2>
        <div class="well well-sm">
            <div class="btn-group">
                <button type="button" class="btn btn-primary" ng-click="showDialog();">Add</button>
                <button type="button" class="btn btn-primary" ng-click="loadDataWithStatus();">{{inactiveButtonName}}</button>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="table-responsive">
                    <table id="tblBankAccount" class="table table-striped table-bordered">
                        <thead>
                            <tr>
                                <th>Bank</th>
                                <th>Account Number</th>
                                <th>Deposit Date</th>
                                <th>Currency</th>
                                <th>Descriptions</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr ng-repeat="bankAccount in bankAccounts">
                                <td>{{ bankAccount.@TB_Bank.FieldName.BankName }}</td>
                                <td>{{ bankAccount.@TB_BankAccount.FieldName.AccountNumber }}</td>
                                <td>{{ bankAccount.@TB_BankAccount.FieldName.DepositDateUI }}</td>
                                <td>{{ bankAccount.@TB_BankAccount.FieldName.Amount | number:2 }}</td>
                                <td>{{ bankAccount.@TB_Currency.FieldName.CurrencyShortName }}</td>
                                <td class="text-align-right ">
                                    <a href="#" id="btnEdit" ng-click="showDialog(bankAccount.@CommonProperties.ID);">Edit</a>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="col-md-12">
                <ul uib-pagination total-items="totalItems" ng-model="currentPage" max-size="maxSize" ng-change="loadData();" class="pagination-sm" boundary-link-numbers="true" rotate="true" items-per-page="itemsPerPage"></ul>
            </div>
        </div>

        <!-- Modal -->
        <div ng-controller="bankAccountDialogController" ng-init="bindControls();">
            <div id="dlgBankAccount" class="modal fade" role="dialog">
                <div class="modal-dialog">
                    <!-- Modal content-->
                    <div class="modal-content">
                        <form name="bankAccountForm" ng-submit="save(bankAccountForm.$valid)" novalidate>
                            <div class="modal-header">
                                <h4 class="modal-title">{{ dialogTitle }}</h4>
                            </div>
                            <div class="modal-body">
                                <p class="text-left text-uppercase"><h4><strong><ins>Basic Info:</ins></strong></h4></p>
                                <p class="text-left"><strong>DepositDate:</strong> {{ bankAccount.@TB_BankAccount.FieldName.DepositDateUI }}</p>
                                <p class="text-left"><strong>Amount:</strong> {{ bankAccount.@TB_BankAccount.FieldName.Amount | number:2 }} {{ bankAccount.@TB_BankAccount.FieldName.CurrencyShortName }}</p>
                                <p class="text-left"><strong>Bank:</strong> {{ bankAccount.@TB_BankAccount.FieldName.BankName }}</p>
                                <hr />
                                <p class="text-left text-uppercase"><h4><strong><ins>More Details:</ins></strong></h4></p>

                                <div class="form-group">
                                    <label>Account Number</label>
                                    <input type="text" name="accountNumber" ng-model="bankAccount.@TB_BankAccount.FieldName.AccountNumber" class="form-control" />
                                </div>

                                <div class="form-group">
                                    <label>Withdraw Date</label>
                                    <div datetimepicker datetimeformat="'@Formats.DateTime.ClientMomentLongDate'" class='input-group date input-datepicker' ng-model="bankAccount.@TB_BankAccount.FieldName.WithdrawDate">
                                        <input id='dtpWithdrawDate' type="text" name="withdrawDate" ng-model="bankAccount.@TB_BankAccount.FieldName.WithdrawDate" class="form-control" />
                                        <span class="input-group-addon">
                                            <span class="glyphicon glyphicon-list-alt"></span>
                                        </span>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label>Interest</label>
                                    <input type="text" name="interest" ng-model="bankAccount.@TB_BankAccount.FieldName.Interest" class="form-control text-align-right" />
                                    <div class="text-align-right">{{ bankAccount.@TB_BankAccount.FieldName.Interest | number:2 }}</div>
                                </div>

                                <div class="form-group">
                                    <label>Descriptions</label>
                                    <textarea ng-model="bankAccount.@CommonProperties.Descriptions" class="form-control" rows="5"></textarea>
                                </div>

                                <div class="form-group">
                                    <span class="checkbox">
                                        <input type="checkbox" ng-model="bankAccount.@CommonProperties.IsActive" ng-checked="bankAccount.@CommonProperties.IsActive" ng-disabled="isActiveDisabled" />
                                        <label>Is Active</label>
                                    </span>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-warning" ng-disabled="bankAccountForm.$invalid" ng-click="openWithdrawMessageDialog()">Withdraw</button>
                                <button type="submit" class="btn btn-default" ng-disabled="bankAccountForm.$invalid">Save</button>
                                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <!--Message Dialog-->
            <div id="dlgWithdrawMessageDialog" class="modal fade" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-body">
                            <p class="text-left">Are you sure to create/update withdraw trace?</p>
                            <p class="text-left text-uppercase"><em><strong>*Notice 1:</strong> System will also create <strong>Income trace</strong> if <strong>Interest</strong> field has values. (must > 0)</em></p>
                            <p class="text-left text-uppercase"><em><strong>*Notice 2:</strong> <strong>Save</strong> all changes before withdrawing ammount.</em></p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-default" ng-click="withdraw()">Yes</button>
                            <button type="button" class="btn btn-default" data-dismiss="modal">No</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@using Yumiki.Web.OnTime.Models;
@{
    Layout = null;
}

<div class="container">
    <h1>{{title}}</h1>
    <form (ngSubmit)="onSave()" #taskForm="ngForm">
        <div class="card bg-secondary">
            <div class="card-body p-2">
                <div class="btn-group">
                    <button type="submit" class="btn btn-primary" [disabled]="!taskForm.form.valid">Save</button>
                    <button type="button" class="btn" (click)="onBack()">Back</button>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    <label>Task Name</label>
                    <input [(ngModel)]="task.TaskName" class="form-control" name="taskName" required #taskName="ngModel" [class.border-danger]="taskName.invalid && (taskName.dirty || taskName.touched)" />
                    <p *ngIf="taskName.invalid && taskName.errors.required && (taskName.dirty || taskName.touched)" class="text-danger">Task Name is required.</p>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label>Project</label>
                    <select class="form-control" name="projectID" [(ngModel)]="task.ProjectID"
                            required #projectID="ngModel" [class.border-danger]="projectID.invalid && (projectID.dirty || projectID.touched)">
                        <option value="" selected="selected">@Yumiki.Commons.Dictionaries.CommonValues.SelectOneForDropDown</option>
                        @foreach (MD_Project project in ViewBag.Projects)
                        {
                            <option value="@project.ID.ToString()">@project.ProjectName</option>
                        }
                    </select>

                    <p *ngIf="projectID.invalid && projectID.errors.required && (projectID.dirty || projectID.touched)" class="text-danger">Project is required.</p>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    <label>Assign To</label>
                    <select class="form-control" name="assignedUserID" [(ngModel)]="task.AssignedUserID">
                        <option value="" selected="selected">@Yumiki.Commons.Dictionaries.CommonValues.SelectOneForDropDown</option>
                        @foreach (MD_User user in ViewBag.Users)
                        {
                            <option value="@user.ID.ToString()">@user.FullName</option>
                        }
                    </select>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label>Phase</label>
                    <select class="form-control" name="phaseID" [(ngModel)]="task.PhaseID"
                            required #phaseID="ngModel" [class.border-danger]="phaseID.invalid && (phaseID.dirty || phaseID.touched)">
                        <option value="" selected="selected">@Yumiki.Commons.Dictionaries.CommonValues.SelectOneForDropDown</option>
                        @foreach (MD_Phase phase in ViewBag.Phases)
                        {
                            <option value="@phase.ID.ToString()">@phase.PhaseName</option>
                        }
                    </select>

                    <p *ngIf="phaseID.invalid && phaseID.errors.required && (phaseID.dirty || phaseID.touched)" class="text-danger">Phase is required.</p>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    <label>Start Date</label>
                    <div class="input-group date">
                        <input type="text" [(ngModel)]="task.StartDate" class="form-control border-right-0" name="startDate"
                               bsDatepicker #startDate="ngModel"
                               [outsideClick]="true" [bsConfig]="{ dateInputFormat: 'DD MMM YYYY', containerClass: 'theme-default', showWeekNumbers : false }"
                               required [class.border-danger]="startDate.invalid && (startDate.dirty || startDate.touched)" />
                        <div class="input-group-append">
                            <span class="input-group-text bg-white" [class.border-danger]="startDate.invalid && (startDate.dirty || startDate.touched)">
                                <span class="fa fa-calendar"></span>
                            </span>
                        </div>
                    </div>

                    <p *ngIf="startDate.invalid && startDate.errors.required && (startDate.dirty || startDate.touched)" class="text-danger">Start Date is required.</p>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label>End Date</label>
                    <div class="input-group date">
                        <input type="text" [(ngModel)]="task.EndDate" class="form-control border-right-0" name="endDate"
                               bsDatepicker #endDate="ngModel"
                               [outsideClick]="true" [bsConfig]="{ dateInputFormat: 'DD MMM YYYY', containerClass: 'theme-default', showWeekNumbers : false }"
                               required [class.border-danger]="endDate.invalid && (endDate.dirty || endDate.touched)" />
                        <div class="input-group-append">
                            <span class="input-group-text bg-white" [class.border-danger]="endDate.invalid && (endDate.dirty || endDate.touched)">
                                <span class="fa fa-calendar"></span>
                            </span>
                        </div>
                    </div>

                    <p *ngIf="endDate.invalid && endDate.errors.required && (endDate.dirty || endDate.touched)" class="text-danger">End Date is required.</p>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    <label>Priority</label>
                    <select class="form-control" name="priority" [(ngModel)]="task.Priority"
                            required #priority="ngModel" [class.border-danger]="priority.invalid && (priority.dirty || priority.touched)">
                        <option value="" selected="selected">@Yumiki.Commons.Dictionaries.CommonValues.SelectOneForDropDown</option>
                        @foreach (Yumiki.Commons.Entities.ExtendEnum priority in ViewBag.Priorities)
                        {
                            <option value="@priority.Value">@priority.DisplayText</option>
                        }
                    </select>

                    <p *ngIf="priority.invalid && priority.errors.required && (priority.dirty || priority.touched)" class="text-danger">Priority is required.</p>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label>Status</label>
                    <select class="form-control" name="status" [(ngModel)]="task.Status"
                            required #status="ngModel" [class.border-danger]="status.invalid && (status.dirty || status.touched)">
                        <option value="" selected="selected">@Yumiki.Commons.Dictionaries.CommonValues.SelectOneForDropDown</option>
                        @foreach (Yumiki.Commons.Entities.ExtendEnum status in ViewBag.Statuses)
                        {
                            <option value="@status.Value">@status.DisplayText</option>
                        }
                    </select>

                    <p *ngIf="status.invalid && status.errors.required && (status.dirty || status.touched)" class="text-danger">Status is required.</p>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="form-group">
                    <label>Descriptions</label>
                    <textarea [(ngModel)]="task.TaskDescriptions" class="form-control" rows="5"
                              name="descriptions" required #descriptions="ngModel" [class.border-danger]="descriptions.invalid && (descriptions.dirty || descriptions.touched)"></textarea>
                    <p *ngIf="descriptions.invalid && descriptions.errors.required && (descriptions.dirty || descriptions.touched)" class="text-danger">Task Descriptions field is required.</p>
                </div>
            </div>
        </div>
    </form>
</div>
